1.  See the file named "project_running.png" for a screenshot of the application with a working example.

2.  The code for the application can be found in the "proj1" directory, with the functions all being implemented in the "fermat.py" file.

3.  To find numbers for which the two algorithms disagree, I began by giving various Carmichael numbers as input. In order to get them to disagree consistently,
    the number of tests run (i.e. K) needed to be lowered to around 5 at the highest. In each instance of disagreement, the Fermat test was the one that incorrectly
    returned as prime, while the Miller-Rabin test returned as composite correctly. I believe this is because the Fermat test is not as rigorous (as it only does
    mod_exp once per each random number) as the Miller-Rabin test, and thus is more likely to return "prime" for a composite number. A screenshot showing a case of
    disagreement can be found in the file named "different_results.png".

4.  The Fermat test in pseudocode can effectively be reduced to:
        n = number to test
        k = number of trials to run

        for i in range(k):
            a = random number between 1 and n-1
            if (a^n-1) mod n does not equal 1:
                return "composite"
        
        if all tests pass:
            return "prime"

    The Miller-Rabin test in pseudocode can effectively be reduced to:
        n = number to test
        k = number of trials to run
        exp = one less than our n (n-1)

        for i in range(k):
            a = random number between 1 and n-1
            
            while (a^exp) mod n equals 1:
                if exp is divisible by 2:
                    exp = exp/2
                else:
                    break out of the loop

            if (a^exp) mod n does not equal n-1:
                return "composite"
        
        if all tests pass:
            return "prime"

    The Miller-Rabin test is more rigorous than the Fermat test, as it does the mod_exp operation multiple times per each random number looking for if/when a non-1 is
    reached, and what it is (since it must be -1, or n-1 for the number to be prime). This makes it more likely to return False for a composite number, and thus is more
    accurate. However, it is also more computationally expensive, as it does more mod_exp operations per each random number. This makes it less efficient than the Fermat
    test, taking both more time and more memory.

5.  The two equations I used to compute the probability of correctness for the two algorithms are very similar.
    
    For Fermat, the equation is:
        P = 1 - (1/(2^k))
    For Miller-Rabin, the equation is:
        P = 1 - (3/(4^k))

    The ratios (1/2 for Fermat, 1/4 for Miller-Rabin) came from both the textbook on pages 35 and 36, and the lab specifications. The reason we use 1/4 for Miller-Rabin is
    because, to quote the lab specifications, "...for composites (including Carmichael numbers), for at least 3/4 (compared to the ½ we used for basic Fermat) of the possible
    choices for a... either the initial test will not equal 1 (mod N)... or, if it does... the first number to show up after the sequence of 1s will be something other than
    N-1 ≣ -1 (mod N).". This means that, for Miller-Rabin, we have a 3/4 chance of getting a non-1 result for composites, and thus a 1/4 chance of getting a -1 result.
